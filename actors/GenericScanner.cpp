//
// Created by Benjamin van Seggelen
//
#include <thread>
#include "utils/Logger.h"
#include "utils/Buffer.h"

#include "DiscoveryManager.h"
#include "MessageRouter.h"
#include "SessionInfo.h"

using namespace eipScanner::cip;
using eipScanner::DiscoveryManager;
using eipScanner::IdentityItem;
using eipScanner::MessageRouter;
using eipScanner::SessionInfo;
using eipScanner::utils::Buffer;
using eipScanner::utils::Logger;
using eipScanner::utils::LogLevel;

int main()
{
    Logger::setLogLevel(LogLevel::DEBUG);
    IdentityItem::Vec devices;
    while (devices.size() == 0)
    {
        DiscoveryManager discoveryManager("172.28.255.255", 0xAF12, std::chrono::seconds(5));
        devices = discoveryManager.discover();
    }

    if (devices.size() > 1)
    {
        Logger(LogLevel::ERROR) << "Expected 1 device, not more or less.";
        return EXIT_FAILURE;
    }

    auto si = std::make_shared<SessionInfo>(devices.at(0).socketAddress.getHost(), 0xAF12);
    auto messageRouter = std::make_shared<MessageRouter>();

    // Read attribute
    while (true)
    {
        auto response = messageRouter->sendRequest(si, ServiceCodes::GET_ATTRIBUTE_SINGLE,
                                                   EPath(0x01, 1, 1),
                                                   {});
        if (response.getGeneralStatusCode() == GeneralStatusCodes::SUCCESS)
        {
            Buffer buffer(response.getData());
            CipUint vendorId;
            buffer >> vendorId;

            Logger(LogLevel::INFO) << "Vendor ID is " << vendorId;
        }
        else
        {
            Logger(LogLevel::ERROR) << "We got error=0x" << std::hex << response.getGeneralStatusCode();
            return EXIT_FAILURE;
        }

        std::this_thread::sleep_for(std::chrono::seconds(1));
    }

    return EXIT_SUCCESS;
}